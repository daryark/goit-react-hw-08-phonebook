{"version":3,"file":"static/js/987.95c2e041.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Searchbar/Searchbar.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsData.contacts.items;\nexport const selectFilter = state => state.contactsData.filter;\nexport const selectLoading = state => state.contactsData.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts\n      .filter(({ name }) =>\n        name.trim().toLowerCase().includes(filter.trim().toLowerCase())\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const ContactInfo = styled.p`\n  font-size: large;\n  padding: 15px;\n  display: inline-block;\n`;\n\nexport const ContactItem = styled.li`\n  border-bottom: 1px solid grey;\n  /* padding-right: 15px;\n  padding-left: 0; */\n  display: flex;\n  align-items: center;\n  /* gap: 100px; */\n  justify-content: space-between;\n`;\n\n// export const DeleteBtn = styled.button`\n//   padding: ${button => button.theme.spaces[4]}px;\n//   color: ${button => button.theme.colors.secondary};\n//   border: none;\n//   background-color: transparent;\n\n//   svg {\n//     width: ${button => button.theme.fontSizes.m}px;\n//     height: auto;\n//     display: block;\n//     transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n//   }\n//   &:hover svg {\n//     color: ${button => button.theme.colors.delete};\n//   }\n// `;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FaRegTrashAlt } from 'react-icons/fa';\n\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\nimport { ContactInfo, ContactItem } from './ContactList.styled';\n\n// import { ContactInfo, ContactItem, DeleteBtn } from './ContactList.styled';\n// import { Notification } from 'components/common/Notification/Notification.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleClickDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {Boolean(filteredContacts.length) ? (\n        <ul>\n          {filteredContacts.map(({ name, phone, id }) => (\n            <ContactItem key={id}>\n              <div>\n                <ContactInfo>{name}</ContactInfo>\n                <ContactInfo>{phone}</ContactInfo>\n              </div>\n              <Button\n                variant=\"outlined\"\n                type=\"button\"\n                onClick={() => handleClickDelete(id)}\n              >\n                <FaRegTrashAlt />\n              </Button>\n            </ContactItem>\n          ))}\n        </ul>\n      ) : (\n        <p>Sorry, no matches found</p>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\n// import PropTypes from 'prop-types';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  InputLabel,\n  OutlinedInput,\n  Button,\n  InputAdornment,\n  FormControl,\n} from '@mui/material';\nimport { AccountCircleRounded, PhoneEnabledRounded } from '@mui/icons-material';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    if (target.name === 'name') {\n      setName(target.value);\n    }\n    if (target.name === 'number') {\n      setNumber(target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in your contacts! Try to find in search.`);\n      return;\n    }\n    dispatch(addContact({ name, phone: number }));\n    reset();\n  };\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl sx={{ m: 1, width: '30ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-name\">Name</InputLabel>\n        <OutlinedInput\n          // {...register('name')}\n          id=\"outlined-adornment-name\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <AccountCircleRounded />\n            </InputAdornment>\n          }\n          label=\"Name\"\n          onChange={handleChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormControl>\n      <FormControl sx={{ m: 1, ml: 0, width: '30ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-number\">Number</InputLabel>\n        <OutlinedInput\n          // {...register('number')}\n          id=\"outlined-adornment-number\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <PhoneEnabledRounded />\n            </InputAdornment>\n          }\n          label=\"Number\"\n          onChange={handleChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormControl>\n      <Button sx={{ m: 2, width: '20ch' }} variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { SearchRounded } from '@mui/icons-material';\nimport {\n  FormControl,\n  InputAdornment,\n  OutlinedInput,\n  InputLabel,\n} from '@mui/material';\n\nexport function Searchbar() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <>\n      <FormControl sx={{ m: 1, width: '35ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-search\">\n          Search contact\n        </InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-search\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <SearchRounded />\n            </InputAdornment>\n          }\n          label=\"Search contact\"\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleChangeFilter}\n          disabled={!contacts.length}\n        />\n      </FormControl>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  ContactForm,\n  ContactList,\n  // Container,\n  // Header2,\n  Loader,\n  // Notification,\n  Searchbar,\n  // Section,\n} from 'components';\nimport { getContacts } from 'redux/contacts/operations';\nimport { selectContacts, selectLoading } from 'redux/contacts/selectors';\n\nexport default function ContactsPages() {\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <section>\n        <div>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Searchbar />\n\n          {!contacts.length && !loading && (\n            <p>You don't have contacts yet, add somebody!</p>\n          )}\n          {Boolean(contacts.length) && <ContactList />}\n        </div>\n      </section>\n      {loading && <Loader />}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contactsData","contacts","items","selectLoading","isLoading","selectFilteredContacts","createSelector","filter","name","trim","toLowerCase","includes","sort","a","b","localeCompare","ContactInfo","styled","ContactItem","ContactList","filteredContacts","useSelector","dispatch","useDispatch","Boolean","length","map","phone","id","Button","variant","type","onClick","deleteContact","handleClickDelete","ContactForm","useState","setName","number","setNumber","handleChange","target","value","onSubmit","e","preventDefault","some","contact","alert","addContact","FormControl","sx","m","width","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","AccountCircleRounded","label","onChange","pattern","title","required","ml","PhoneEnabledRounded","Searchbar","SearchRounded","setFilterValue","disabled","ContactsPages","loading","useEffect","getContacts","Loader"],"sourceRoot":""}