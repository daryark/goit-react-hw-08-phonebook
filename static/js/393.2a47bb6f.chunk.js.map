{"version":3,"file":"static/js/393.2a47bb6f.chunk.js","mappings":"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","sources":["HOC/WithAuthRedirect.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Searchbar/Searchbar.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectIsLoggedIn } from 'redux/user/selectors';\n\nfunction WithAuthRedirect(Component, navigateTo) {\n  const ComponentWithRedirect = props => {\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n\n    return isLoggedIn ? <Component {...props} /> : <Navigate to={navigateTo} />;\n  };\n  return ComponentWithRedirect;\n}\n\nexport default WithAuthRedirect;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsData.contacts.items;\nexport const selectFilter = state => state.contactsData.filter;\nexport const selectLoading = state => state.contactsData.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts\n      .filter(({ name }) =>\n        name.trim().toLowerCase().includes(filter.trim().toLowerCase())\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const ContactInfo = styled.p`\n  font-size: large;\n  padding: 15px;\n  display: inline-block;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid grey;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FaRegTrashAlt } from 'react-icons/fa';\n\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button, Typography } from '@mui/material';\nimport { ContactInfo, ContactItem } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleClickDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {Boolean(filteredContacts.length) ? (\n        <ul>\n          {filteredContacts.map(({ name, number, id }) => (\n            <ContactItem key={id}>\n              <div>\n                <ContactInfo>{name}</ContactInfo>\n                <ContactInfo>{number}</ContactInfo>\n              </div>\n              <Button\n                variant=\"outlined\"\n                type=\"button\"\n                onClick={() => handleClickDelete(id)}\n              >\n                <FaRegTrashAlt />\n              </Button>\n            </ContactItem>\n          ))}\n        </ul>\n      ) : (\n        <Typography variant=\"h5\" component=\"p\" sx={{ color: '#d32f2f' }}>\n          Sorry, no matches found.\n        </Typography>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  InputLabel,\n  OutlinedInput,\n  Button,\n  InputAdornment,\n  FormControl,\n} from '@mui/material';\nimport { AccountCircleRounded, PhoneEnabledRounded } from '@mui/icons-material';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    if (target.name === 'name') {\n      setName(target.value);\n    }\n    if (target.name === 'number') {\n      setNumber(target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in your contacts! Try to find in search.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl sx={{ m: 1, width: '30ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-name\">Name</InputLabel>\n        <OutlinedInput\n          // {...register('name')}\n          id=\"outlined-adornment-name\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <AccountCircleRounded />\n            </InputAdornment>\n          }\n          label=\"Name\"\n          onChange={handleChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormControl>\n      <FormControl sx={{ m: 1, ml: 0, width: '30ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-number\">Number</InputLabel>\n        <OutlinedInput\n          // {...register('number')}\n          id=\"outlined-adornment-number\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <PhoneEnabledRounded />\n            </InputAdornment>\n          }\n          label=\"Number\"\n          onChange={handleChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormControl>\n      <Button sx={{ m: 2, width: '20ch' }} variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n}\n//\n//\n//\n//\n// // import { useState } from 'react';\n// import { useForm } from 'react-hook-form';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from 'yup';\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts } from 'redux/contacts/selectors';\n// import { addContact } from 'redux/contacts/operations';\n// import {\n//   InputLabel,\n//   OutlinedInput,\n//   Button,\n//   InputAdornment,\n//   FormControl,\n// } from '@mui/material';\n// import { AccountCircleRounded, PhoneEnabledRounded } from '@mui/icons-material';\n\n// export function ContactForm() {\n//   // const [name, setName] = useState('');\n//   // const [number, setNumber] = useState('');\n//   const contacts = useSelector(selectContacts);\n//   const dispatch = useDispatch();\n\n//   const schema = yup\n//     .object({\n//       name: yup.string().min(2).max(20).required(),\n//       number: yup.string().phone().required(),\n//     })\n//     .required();\n\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//   } = useForm({\n//     resolver: yupResolver(schema),\n//   });\n\n//   const registerSubmit = data => {\n//     console.log('errors', errors);\n//     if (\n//       contacts.some(\n//         contact => contact.name.toLowerCase() === data.name.toLowerCase()\n//       )\n//     ) {\n//       alert(`${data.name} is already in your contacts! Try to find in search.`);\n//       return;\n//     }\n//     dispatch(addContact(data));\n//     //  reset();\n//   };\n\n//   // const handleChange = ({ target }) => {\n//   //   if (target.name === 'name') {\n//   //     setName(target.value);\n//   //   }\n//   //   if (target.name === 'number') {\n//   //     setNumber(target.value);\n//   //   }\n//   // };\n\n//   // function reset() {\n//   //   setName('');\n//   //   setNumber('');\n//   // }\n\n//   return (\n//     <form onSubmit={handleSubmit(registerSubmit)}>\n//       <FormControl sx={{ m: 1, width: '30ch' }} variant=\"outlined\">\n//         <InputLabel htmlFor=\"outlined-adornment-name\">Name</InputLabel>\n//         <OutlinedInput\n//           {...register('name')}\n//           id=\"outlined-adornment-name\"\n//           endAdornment={\n//             <InputAdornment position=\"end\">\n//               <AccountCircleRounded />\n//             </InputAdornment>\n//           }\n//           label=\"Name\"\n//           type=\"text\"\n//           name=\"name\"\n//           // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//       </FormControl>\n//       <FormControl sx={{ m: 1, ml: 0, width: '30ch' }} variant=\"outlined\">\n//         <InputLabel htmlFor=\"outlined-adornment-number\">Number</InputLabel>\n//         <OutlinedInput\n//           {...register('number')}\n//           id=\"outlined-adornment-number\"\n//           endAdornment={\n//             <InputAdornment position=\"end\">\n//               <PhoneEnabledRounded />\n//             </InputAdornment>\n//           }\n//           label=\"Number\"\n//           type=\"tel\"\n//           name=\"number\"\n//           // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           // required\n//         />\n//       </FormControl>\n//       <Button sx={{ m: 2, width: '20ch' }} variant=\"contained\" type=\"submit\">\n//         Add contact\n//       </Button>\n//     </form>\n//   );\n// }\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { SearchRounded } from '@mui/icons-material';\nimport {\n  FormControl,\n  InputAdornment,\n  OutlinedInput,\n  InputLabel,\n} from '@mui/material';\n\nexport function Searchbar() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <>\n      <FormControl sx={{ m: 1, width: '35ch' }} variant=\"outlined\">\n        <InputLabel htmlFor=\"outlined-adornment-search\">\n          Search contact\n        </InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-search\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <SearchRounded />\n            </InputAdornment>\n          }\n          label=\"Search contact\"\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleChangeFilter}\n          disabled={!contacts.length}\n        />\n      </FormControl>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport WithAuthRedirect from 'HOC/WithAuthRedirect';\nimport { ContactForm, ContactList, Loader, Searchbar } from 'components';\n\nimport { getContacts } from 'redux/contacts/operations';\nimport { selectContacts, selectLoading } from 'redux/contacts/selectors';\n\nimport { Typography } from '@mui/material';\n\nfunction ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <section>\n        <div>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Searchbar />\n\n          {!contacts.length && !loading && (\n            <Typography variant=\"h6\" component=\"p\" sx={{ color: '#d32f2f' }}>\n              You don't have contacts yet, add somebody!\n            </Typography>\n          )}\n          {Boolean(contacts.length) && <ContactList />}\n        </div>\n      </section>\n      {loading && <Loader />}\n    </>\n  );\n}\nexport default WithAuthRedirect(ContactsPage, '/signin');\n"],"names":["Component","navigateTo","props","useSelector","selectIsLoggedIn","to","selectContacts","state","contactsData","contacts","items","selectLoading","isLoading","selectFilteredContacts","createSelector","filter","name","trim","toLowerCase","includes","sort","a","b","localeCompare","ContactInfo","styled","ContactItem","ContactList","filteredContacts","dispatch","useDispatch","Boolean","length","map","number","id","Button","variant","type","onClick","deleteContact","handleClickDelete","Typography","component","sx","color","ContactForm","useState","setName","setNumber","handleChange","target","value","onSubmit","e","preventDefault","some","contact","alert","addContact","FormControl","m","width","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","AccountCircleRounded","label","onChange","pattern","title","required","ml","PhoneEnabledRounded","Searchbar","SearchRounded","setFilterValue","disabled","WithAuthRedirect","loading","useEffect","getContacts","Loader"],"sourceRoot":""}